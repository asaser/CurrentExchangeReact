{"version":3,"sources":["components/Navigations/Navigation.js","components/Buttons/Button.js","pages/Calculators/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","className","fixed","bg","variant","Brand","src","alt","width","height","Button","shortAPI","Select","value","setCurrency","useState","currencies","setCurrencies","useEffect","fetch","then","response","json","data","Object","keys","rates","onChange","event","target","map","elem","key","Calculator","result","setResault","amount","setAmount","currencyFrom","setCurrencyFrom","currencyTo","setCurrencyTo","onSubmit","preventDefault","Container","Row","Col","md","Form","Group","lg","Control","size","type","placeholder","block","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4222294.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport './Navigation.css';\r\n\r\n\r\nfunction Navigation() {\r\n\r\n    const navbarText = \"Current Exchange Value\";\r\n\r\n    return (\r\n        <Navbar className=\"mainNav\" fixed=\"top\" bg=\"transparent\" variant=\"transparent\">\r\n            <Navbar.Brand>\r\n                <img\r\n                    src=\"./logoNavbar.png\"\r\n                    alt=\"\"\r\n                    width=\"30px\"\r\n                    height=\"30px\"\r\n                    className=\"d-inline-block align-top mainLogoNav\"\r\n                />\r\n             <b>{navbarText}</b>\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction ButtonClick(props) {\r\n    return (\r\n      <button>{props.label}</button>\r\n    );\r\n  }\r\n  ButtonClick.defaultProps =  {\r\n    label: \"Calculate the money\"\r\n  }\r\n\r\n  export default Button;\r\n","import React, { useState, useEffect } from 'react';  //add HOOKow\r\nimport { Col, Container, Form, Row } from 'react-bootstrap';\r\nimport { Button } from '../../components/Buttons';\r\nimport './Calculator.css';\r\n\r\n\r\nconst shortAPI = \"https://api.ratesapi.io/api/latest?base=\";\r\n\r\nfunction Select({ value, setCurrency }) {\r\n\r\n    const [currencies, setCurrencies] = useState( [] );\r\n\r\n    useEffect (() => {\r\n        fetch(`${shortAPI}PLN`)\r\n        .then(response => response.json())\r\n        .then (data => {\r\n            setCurrencies (Object.keys(data.rates))\r\n        });\r\n\r\n        return () => {\r\n            // clearInterval\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <select value={value} onChange = {(event) => setCurrency(event.target.value)}>\r\n            {currencies.map((elem) => {\r\n            return <option key = {`index-${elem}`} value = {elem}>{elem}</option>\r\n            })}\r\n        </select>\r\n    );\r\n}\r\n\r\nfunction Calculator() {\r\n\r\n    const [result, setResault] = useState(\"0\");\r\n    const [amount, setAmount] = useState();\r\n    const [currencyFrom, setCurrencyFrom] = useState('NOK');\r\n    const [currencyTo, setCurrencyTo] = useState('PLN');\r\n    const handleSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n        fetch(`${shortAPI}${currencyFrom}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setResault(amount * data.rates[currencyTo]);\r\n        });\r\n    }\r\n\r\n    return (\r\n    <form className=\"mainForm\" onSubmit = {handleSubmit}>\r\n\r\n    <Container>\r\n        <Row className=\"currencySelectionValue\">\r\n            <Col className=\"chooseCountry\">\r\n        <div>\r\n            <div><span>From: </span></div>\r\n            <Select value = {currencyFrom} setCurrency = {setCurrencyFrom}></Select>\r\n        </div>\r\n            </Col>\r\n\r\n            <Col md=\"auto\">\r\n        <div>\r\n                <img\r\n                src=\"./logoNavbar.png\"\r\n                alt=\"\"\r\n                width=\"250px\"\r\n                height=\"250px\"\r\n                />\r\n        </div>\r\n            </Col>\r\n\r\n            <Col className=\"chooseCountry\">\r\n        <div>\r\n            <div><span>To: </span></div>\r\n            <Select value = {currencyTo} setCurrency = {setCurrencyTo}></Select>\r\n        </div>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n\r\n    <Form.Group>\r\n        <Form.Row className=\"formControl\">\r\n            <Col lg={7}>\r\n                <Form.Control className=\"formControlValue\" size=\"lg\" type=\"number\" placeholder=\"0\"\r\n                value = {amount} onChange = {(event) => { setAmount(event.target.value); }}>\r\n                </Form.Control>\r\n            </Col>\r\n        </Form.Row>\r\n    </Form.Group>\r\n\r\n    <Container>\r\n        <Row className=\"resultValue justify-content-lg-center\">\r\n            <Col lg=\"auto\">\r\n                <div>Result: {result}</div>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n\r\n    <Container>\r\n        <Row className=\"buttonValue\">\r\n            <Col lg={8}>\r\n                <Button size=\"lg\" variant=\"success\" type=\"submit\" block>\r\n                    <b>Calculate the money</b>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  // Link,\n  Route\n} from 'react-router-dom';\n\nimport Navigation from './components/Navigations/Navigation';\n\nimport Calculator from '../src/pages/Calculators/Calculator';\nimport './App.css';\n\n\n\nfunction App() {\n  // JSX\n  return (\n    <div className=\"App\">\n\n      <Router>\n          <Navigation></Navigation>\n          <Switch>\n            <Route>\n            <Calculator></Calculator>\n            </Route>\n            {/* <Route path=\"/flags\">\n            <Flags></Flags>\n            </Route> */}\n          </Switch>\n        </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}